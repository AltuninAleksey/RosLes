# Generated by Django 4.1 on 2023-09-01 13:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('djangoForest', '0002_federaldistricts_forestcareactivities_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccordanceMolodKrAndTPPL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_accordance', models.CharField(max_length=300, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Соответ. молодняка кр. и тр. ПЛ',
                'verbose_name_plural': 'Соответ. молодняка кр. и тр. ПЛ',
            },
        ),
        migrations.CreateModel(
            name='AccordanceNoneAccordanceEconomy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_accordance_none_economy', models.CharField(max_length=300, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Соответ. не соответ. хозяйству',
                'verbose_name_plural': 'Соответ. не соответ. хозяйству ',
            },
        ),
        migrations.CreateModel(
            name='BonitetOrlov',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_of_planting', models.FloatField(verbose_name='Возраст насаждения')),
                ('height_planting_for_bonitet_class', models.CharField(max_length=300, verbose_name='Высота насаждения по классам бонитета, м')),
                ('class_bonitet', models.CharField(max_length=300, verbose_name='Класс бонитета')),
            ],
            options={
                'verbose_name': 'Бонитет по Орлову',
                'verbose_name_plural': 'Бонитет по Орлову',
            },
        ),
        migrations.CreateModel(
            name='CategoryGroundLFInNoneAccordance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_category_ground', models.CharField(max_length=300, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Кат. земель лф в случ. несоотв.',
                'verbose_name_plural': 'Кат. земель лф в случ. несоотв.',
            },
        ),
        migrations.CreateModel(
            name='CategoryOfForestFundLands',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_category', models.CharField(max_length=350, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Категория земель лесного фонда',
                'verbose_name_plural': 'Категория земель лесного фонда',
            },
        ),
        migrations.CreateModel(
            name='CheckTrigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bool', models.IntegerField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DescriptionRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_assignment_land', models.IntegerField(choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023)], default=2023, null=True, verbose_name='Год отнесения к землям')),
                ('year_format_fond_trees', models.IntegerField(choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023)], default=2023, null=True, verbose_name='Год образования категории фонда лесовосстановления')),
                ('inf_restore_forest', models.CharField(max_length=500, null=True, verbose_name='Данные о проведенных мероприятиях по уходу за лесами')),
                ('breed_structure_sapling_act_land', models.CharField(max_length=500, null=True, verbose_name='Породный состав молодняка по Акту отнесения земель')),
                ('economy_act_land', models.CharField(max_length=500, verbose_name='Хозяйство по Акту отнесения земель')),
                ('change_breed_and_structure_sapling', models.CharField(max_length=500, null=True, verbose_name='Изменение породного и качественного состава молодняка')),
                ('results_surtvey', models.CharField(max_length=600, null=True, verbose_name='Вывод по результатам обследования')),
                ('recommendation', models.CharField(max_length=300, null=True, verbose_name='Рекомендации')),
                ('count_plants', models.FloatField(null=True, verbose_name='Количество высаженных растений на 1 га')),
                ('preservation_breed', models.CharField(max_length=300, null=True, verbose_name='сохранность культивируемой породы на момент обследования')),
                ('farm_according_data_survey', models.CharField(max_length=300, null=True, verbose_name='Хозяйство по данным натурного обследования ')),
                ('breed_composition_sapling_data_surver', models.CharField(max_length=300, null=True, verbose_name='Породный состав молодняка по данным натурного обследования')),
            ],
        ),
        migrations.CreateModel(
            name='Economy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_economy', models.CharField(max_length=300, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Хозяйство',
                'verbose_name_plural': 'Хозяйство',
            },
        ),
        migrations.CreateModel(
            name='FieldCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protected_areas_of_forests', models.CharField(max_length=300, null=True, verbose_name='Особо защитные участки лесов')),
                ('rent_area', models.BooleanField(default=0, null=True, verbose_name='Участок находится в аренде')),
                ('time_of_reforestation', models.CharField(max_length=300, null=True, verbose_name='Срок проведения лесовосстановления')),
                ('forest_type', models.CharField(max_length=100, null=True)),
                ('point7year', models.IntegerField(choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023)], default=2023, null=True, verbose_name='Год')),
                ('point7date', models.DateField(null=True, verbose_name='Дата')),
                ('point7number', models.IntegerField(null=True, verbose_name='Номер')),
                ('point7agreed', models.CharField(max_length=300, null=True, verbose_name='Утверждено')),
                ('point7_natural_composition', models.CharField(max_length=300, null=True, verbose_name='Природный состав')),
                ('id_economy', models.CharField(max_length=300, null=True, verbose_name='Природный состав 2')),
                ('point7_completeness', models.CharField(max_length=300, null=True, verbose_name='Полнота')),
                ('point7_stock', models.IntegerField(null=True, verbose_name='Запас')),
                ('square_one_sample_area', models.FloatField(null=True, verbose_name='Площадь 1 пробной площади')),
                ('count_sample_area', models.IntegerField(null=True, verbose_name='Количество пробных площадей')),
                ('breed_composition', models.CharField(max_length=500, null=True, verbose_name='Породный состав')),
                ('completeness', models.CharField(max_length=300, null=True, verbose_name='Полнота')),
                ('stock', models.IntegerField(null=True, verbose_name='Запас')),
                ('conclusion', models.CharField(max_length=500, null=True, verbose_name='Заключение')),
                ('plot_farm_referring_land', models.CharField(max_length=500, null=True, verbose_name='Участок хозяйству при отнесении к землям')),
                ('recomendation', models.CharField(max_length=300, null=True, verbose_name='Рекомендации')),
                ('plot_features', models.CharField(max_length=500, null=True, verbose_name='Особенности участка')),
                ('site_survey', models.CharField(max_length=300, null=True, verbose_name='Обследование провел')),
                ('in_front', models.CharField(max_length=300, null=True, verbose_name='В присуствии')),
                ('date_and_time', models.DateTimeField(null=True, verbose_name='Дата и время обследования')),
                ('id_category_of_forest_fund_lands', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.categoryofforestfundlands', verbose_name='Категория земель лесного фонда')),
                ('id_economy_sapling', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.economy', verbose_name='Хозяйство')),
            ],
            options={
                'verbose_name': 'Полевая карточка',
                'verbose_name_plural': 'Полевая карточка',
            },
        ),
        migrations.CreateModel(
            name='ForestAreas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_forest_areas', models.CharField(max_length=300, verbose_name='Наименование')),
                ('composition_of_forest_areas', models.CharField(max_length=500, verbose_name='Состав лесных районов')),
                ('comm', models.CharField(max_length=500, verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Лесные районы',
                'verbose_name_plural': 'Лесные районы',
            },
        ),
        migrations.CreateModel(
            name='ForestFormingByDefault',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Лесообразующие породы по умолчанию',
            },
        ),
        migrations.CreateModel(
            name='ForestProtectionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_forest_protection_category', models.CharField(max_length=350, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Категория защитности лесов',
                'verbose_name_plural': 'Категория защитности лесов',
            },
        ),
        migrations.CreateModel(
            name='MethodOfReforestation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_method', models.CharField(max_length=350, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Способ лесовосстановления',
                'verbose_name_plural': 'Способ лесовосстановления',
            },
        ),
        migrations.CreateModel(
            name='PhotoPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='photos/%Y/%m/%d/')),
                ('latitude', models.FloatField(blank=True, default=0, verbose_name='Широта')),
                ('longitude', models.FloatField(blank=True, default=0, verbose_name='Долгота')),
                ('date', models.CharField(max_length=100, null=True, verbose_name='Дата')),
            ],
            options={
                'verbose_name': 'Фото точка',
                'verbose_name_plural': 'Фото точка',
            },
        ),
        migrations.CreateModel(
            name='PlotCoeff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratio_composition', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('avg_diameter', models.FloatField()),
                ('avg_height', models.FloatField()),
                ('count_plants', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Коэфф. участка',
                'verbose_name_plural': 'Коэфф. участка',
            },
        ),
        migrations.CreateModel(
            name='point7Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratio_composition', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('avg_height', models.IntegerField()),
                ('avg_diameter', models.IntegerField()),
                ('count_register_wood_plants', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='point7Table2Sapling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratio_composition', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('avg_height', models.IntegerField()),
                ('avg_diameter', models.IntegerField()),
                ('count_register_wood_plants', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='PurposeOfForests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_purpose', models.CharField(max_length=350, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Целевое назначение лесов',
                'verbose_name_plural': 'Целевое назначение лесов',
            },
        ),
        migrations.CreateModel(
            name='SchemaMixingBreeds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_schema', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('map', models.CharField(max_length=1)),
            ],
            options={
                'verbose_name': 'Трекинг',
                'verbose_name_plural': 'Трекинг',
            },
        ),
        migrations.CreateModel(
            name='TypeForestGrowingConditions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subtypes_of_humidity', models.CharField(max_length=300, verbose_name='Подтипы влажности')),
                ('subtypes_of_rich', models.CharField(max_length=300, verbose_name='Подтипы богатства')),
                ('type_forest_growing_conditions', models.CharField(max_length=300, verbose_name='Тип лесорастительный условий')),
            ],
            options={
                'verbose_name': 'Тип лесорастительный условий',
                'verbose_name_plural': 'Тип лесорастительный условий',
            },
        ),
        migrations.CreateModel(
            name='Undergrowth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=350, verbose_name='Наименовапние')),
            ],
            options={
                'verbose_name': 'Подлесок',
            },
        ),
        migrations.CreateModel(
            name='UndergrowthByDefault',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Подлесок по умолчанию',
                'verbose_name_plural': 'Подлесок по умолчанию',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': 'Пользователи',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.AlterModelOptions(
            name='breed',
            options={'verbose_name': 'Лесообразующие породы', 'verbose_name_plural': 'Лесообразующие породы'},
        ),
        migrations.AlterModelOptions(
            name='quarter',
            options={'verbose_name': 'Квартал', 'verbose_name_plural': 'Квартал'},
        ),
        migrations.RemoveField(
            model_name='branches',
            name='id_subject_RF',
        ),
        migrations.RemoveField(
            model_name='breed',
            name='id_forestly',
        ),
        migrations.RemoveField(
            model_name='profile',
            name='email',
        ),
        migrations.RemoveField(
            model_name='profile',
            name='id_working_breeds',
        ),
        migrations.RemoveField(
            model_name='quarter',
            name='id_forestly',
        ),
        migrations.AddField(
            model_name='breed',
            name='ShortName',
            field=models.CharField(max_length=10, null=True, verbose_name='Сокр.'),
        ),
        migrations.AddField(
            model_name='breed',
            name='is_foliar',
            field=models.BooleanField(default=0, null=True, verbose_name='Лиственное'),
        ),
        migrations.AddField(
            model_name='breed',
            name='is_pine',
            field=models.BooleanField(default=0, null=True, verbose_name='Хвойное'),
        ),
        migrations.AddField(
            model_name='districtforestly',
            name='id_forestly',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.forestly', verbose_name='Лесничество'),
        ),
        migrations.AddField(
            model_name='list',
            name='age',
            field=models.IntegerField(null=True, verbose_name='Возраст'),
        ),
        migrations.AddField(
            model_name='list',
            name='avg_diameter',
            field=models.FloatField(default=0, null=True, verbose_name='Средний диаметр'),
        ),
        migrations.AddField(
            model_name='list',
            name='avg_height',
            field=models.FloatField(default=0, null=True, verbose_name='Средняя высота'),
        ),
        migrations.AddField(
            model_name='list',
            name='avg_height_undergrowth',
            field=models.FloatField(null=True, verbose_name='Средняя высота подлеска'),
        ),
        migrations.AddField(
            model_name='list',
            name='count_of_plants',
            field=models.IntegerField(null=True, verbose_name='Количество растений для подлеска'),
        ),
        migrations.AddField(
            model_name='list',
            name='main',
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='list',
            name='mark_update',
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='list',
            name='ratio_composition',
            field=models.IntegerField(null=True, verbose_name='Коэфф. состава'),
        ),
        migrations.AddField(
            model_name='listregion',
            name='id_profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.profile'),
        ),
        migrations.AddField(
            model_name='listregion',
            name='mark_del',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='listregion',
            name='mark_update',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='listregion',
            name='number_region',
            field=models.CharField(default=0, max_length=100),
        ),
        migrations.AddField(
            model_name='quarter',
            name='id_district_forestly',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.districtforestly', verbose_name='Участковое лесничество'),
        ),
        migrations.AddField(
            model_name='sample',
            name='id_quarter',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.quarter', verbose_name='Квартал'),
        ),
        migrations.AddField(
            model_name='sample',
            name='lenght',
            field=models.FloatField(default=0, null=True, verbose_name='Длина'),
        ),
        migrations.AddField(
            model_name='sample',
            name='mark_update',
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='sample',
            name='soil_lot',
            field=models.CharField(default=0, max_length=300, null=True, verbose_name='Выдел'),
        ),
        migrations.AddField(
            model_name='sample',
            name='square',
            field=models.FloatField(default=0, null=True, verbose_name='Площадь'),
        ),
        migrations.AddField(
            model_name='sample',
            name='width',
            field=models.FloatField(default=0, null=True, verbose_name='Ширина'),
        ),
        migrations.AlterField(
            model_name='list',
            name='id_sample',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.sample', verbose_name='Проба'),
        ),
        migrations.AlterField(
            model_name='list',
            name='max_height',
            field=models.FloatField(default=0, null=True, verbose_name='Максимальная высота'),
        ),
        migrations.AlterField(
            model_name='listregion',
            name='sample_region',
            field=models.FloatField(max_length=300, verbose_name='Плошадь участка, га'),
        ),
        migrations.AlterField(
            model_name='listregion',
            name='soil_lot',
            field=models.CharField(default=0, max_length=300, null=True, verbose_name='Выдел'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='date',
            field=models.DateField(null=True, verbose_name='Дата пробы'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='id_profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.profile', verbose_name='Сотрудник '),
        ),
        migrations.AlterField(
            model_name='sample',
            name='sample_area',
            field=models.FloatField(verbose_name='Площадь пробы, га'),
        ),
        migrations.DeleteModel(
            name='Region',
        ),
        migrations.AddField(
            model_name='undergrowthbydefault',
            name='id_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.profile', verbose_name='Профиль'),
        ),
        migrations.AddField(
            model_name='undergrowthbydefault',
            name='id_undergrowth',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.undergrowth', verbose_name='Подлесок'),
        ),
        migrations.AddField(
            model_name='track',
            name='id_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.profile', verbose_name='Профиль'),
        ),
        migrations.AddField(
            model_name='point7table2sapling',
            name='id_list_region_breed',
            field=models.ForeignKey(default=89, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.list', verbose_name='Порода'),
        ),
        migrations.AddField(
            model_name='point7table',
            name='id_list_region_breed',
            field=models.ForeignKey(default=89, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.list', verbose_name='Порода'),
        ),
        migrations.AddField(
            model_name='plotcoeff',
            name='breed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.breed'),
        ),
        migrations.AddField(
            model_name='plotcoeff',
            name='id_field_card',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.fieldcard'),
        ),
        migrations.AddField(
            model_name='photopoint',
            name='id_sample',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.sample', verbose_name='Проба'),
        ),
        migrations.AddField(
            model_name='forestformingbydefault',
            name='id_breed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.breed', verbose_name='Порода'),
        ),
        migrations.AddField(
            model_name='forestformingbydefault',
            name='id_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djangoForest.profile', verbose_name='Профиль'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_forest_protection_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.forestprotectioncategory', verbose_name='Категория защитных лесов'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_list_region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.listregion', verbose_name='Перечетная ведомость участка'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_method_of_reforestation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.methodofreforestation', verbose_name='Способ лесовосстановления'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_point7_table2_sapling',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.point7table2sapling', verbose_name='Таблица 2 молодняк'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_point7table',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.point7table'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_purpose_of_forests',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.purposeofforests', verbose_name='Целевое назначение лесов'),
        ),
        migrations.AddField(
            model_name='fieldcard',
            name='id_type_forest_growing_conditions',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.typeforestgrowingconditions', verbose_name='Тип лесорастительных условий'),
        ),
        migrations.AddField(
            model_name='descriptionregion',
            name='id_list_region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.listregion', verbose_name='Перечетная ведомость участка'),
        ),
        migrations.AddField(
            model_name='descriptionregion',
            name='id_method_of_reforestation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.methodofreforestation', verbose_name='Способ лесовосстановления'),
        ),
        migrations.AddField(
            model_name='descriptionregion',
            name='id_schema_mixing_breeds',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.schemamixingbreeds', verbose_name='Схема смешения пород'),
        ),
        migrations.AddField(
            model_name='list',
            name='id_undergrowth',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.undergrowth', verbose_name='Подлесок'),
        ),
        migrations.AddField(
            model_name='profile',
            name='id_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoForest.users', verbose_name='Пользователь'),
        ),
    ]
